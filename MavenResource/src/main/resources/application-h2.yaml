spring:
  datasource:
    driver-class-name: org.h2.Driver
    schema: classpath:db/schema-h2.sql
    data: classpath:db/data-h2.sql
    #url: jdbc:h2:mem:test
    url: jdbc:h2:file:./datasource/h2/jpa;AUTO_SERVER=TRUE
    username: root
    password: root
    initialization-mode: never
    platform: all
    name: 内存数据源
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        trace: false
        web-allow-others: true
logging:
  level:
    root: INFO
    com.application.mapper: DEBUG
server:
  servlet:
    session:
      timeout: 10s # session 会话连接超时日期,就是持续连接10s内如果没有连接成功则超时
      cookie:
        max-age: 10m # 这是session 真正的失效日期
        secure: false
        comment: beatiful
        http-only: true
#        path:
#        domain:
#        name: system    
jhipster:
  cors:
    allowed-origins: "*"
    allowed-methods: "*"
    allowed-headers: "*"
    exposed-headers: "Authorization,Link,X-Total-Count"
    allow-credentials: true
    max-age: 1800
  async:
    core-pool-size: 2
    max-pool-size: 50
    queue-capacity: 10000
  security:
    remember-me:
      key: 4e431fe0f41cec2457ba464d1fa53d2e287a54e5e92c9dca30c68d95af40e1bbc2cc4d3d25f0f61049dc3934466e6586a8eb
    authentication:
      jwt:
        base64-secret: RFE2Y1NNTlRsRDNDLzJiblVQRnZMYUZ4WXVjV1huWWVYa1luY0NNT3hlTVU1QmI2ZVZ3N2pkVFBISjBHS08zSEV1NWNYMGVGSXh0S3ZTQURjSkdzWWJsRE5sTjg3cVpjdDUwSkxhQnR6WXlhOUdTNHc5YjBkazlmbnk1WXd4MFowT3hZYnZFUUU2dVVyWW1ET0IwbUtNeGNCbmlCc1dYOTFqSnhmNy9VTlc4JTNE
        token-validity-in-seconds: 86400
        token-validity-in-seconds-for-remember-me: 2592000    
mybatis-plus:
  #configLocation: #MyBatis 配置文件位置，如果您有单独的 MyBatis 配置，请将其路径配置到 configLocation 中.MyBatis Configuration 的具体内容请参考MyBatis 官方文档
  mapperLocations: classpath*:/mapper/**/*.xml #Maven 多模块项目的扫描路径需以 classpath*: 开头 （即加载多个 jar 包下的 XML 文件）;MyBatis Mapper 所对应的 XML 文件位置，如果您在 Mapper 中有自定义方法(XML 中有自定义实现)，需要进行该配置，告诉 Mapper 所对应的 XML 文件位置
  typeAliasesPackage: com.application.domain #MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名，注册后在 Mapper 对应的 XML 文件中可以直接使用类名，而不用使用全限定的类名(即 XML 中调用的时候不用包含包名)
  typeAliasesSuperType: com.baomidou.mybatisplus.extension.activerecord.Model #该配置请和 typeAliasesPackage 一起使用，如果配置了该属性，则仅仅会扫描路径下以该类作为父类的域对象
  #typeHandlersPackage: #TypeHandler 扫描路径，如果配置了该属性，SqlSessionFactoryBean 会把该包下面的类注册为对应的 TypeHandler
  typeEnumsPackage: com.application.common.enums #枚举类 扫描路径，如果配置了该属性，会将路径下的枚举类进行注入，让实体类字段能够简单快捷的使用枚举属性
  checkConfigLocation: false #启动时是否检查 MyBatis XML 文件的存在，默认不检查;SpringBoot特有功能
  executorType: simple #通过该属性可指定 MyBatis 的执行器，MyBatis 的执行器总共有三种；ExecutorType.SIMPLE：该执行器类型不做特殊的事情，为每个语句的执行创建一个新的预处理语句；ExecutorType.REUSE：该执行器类型会复用预处理语句（PreparedStatement）；ExecutorType.BATCH：该执行器类型会批量执行所有的更新语句
  #configurationProperties: #指定外部化 MyBatis Properties 配置，通过该配置可以抽离配置，实现不同环境的配置部署
  configuration:
    map-underscore-to-camel-case: true #是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属性名 aColumn（驼峰命名） 的类似映射
    default-enum-type-handler: org.apache.ibatis.type.EnumTypeHandler #默认枚举处理类,如果配置了该属性,枚举将统一使用指定处理器进行处理;org.apache.ibatis.type.EnumTypeHandler : 存储枚举的名称;org.apache.ibatis.type.EnumOrdinalTypeHandler : 存储枚举的索引;com.baomidou.mybatisplus.extension.handlers.MybatisEnumTypeHandler : 枚举类需要实现IEnum接口或字段标记@EnumValue注解.(3.1.2以下版本为EnumTypeHandler);
    aggressive-lazy-loading: true #当设置为 true 的时候，懒加载的对象可能被任何懒属性全部加载，否则，每个属性都按需加载。需要和 lazyLoadingEnabled 一起使用
    auto-mapping-behavior: partial #MyBatis 自动映射策略，通过该配置可指定 MyBatis 是否并且如何来自动映射数据表字段与对象的属性，总共有 3 种可选值:AutoMappingBehavior.NONE：不启用自动映射;AutoMappingBehavior.PARTIAL：只对非嵌套的 resultMap 进行自动映射;AutoMappingBehavior.FULL：对所有的 resultMap 都进行自动映射
    auto-mapping-unknown-column-behavior: none #MyBatis 自动映射时未知列或未知属性处理策略，通过该配置可指定 MyBatis 在自动映射过程中遇到未知列或者未知属性时如何处理，总共有 3 种可选值:AutoMappingUnknownColumnBehavior.NONE：不做任何处理 (默认值);AutoMappingUnknownColumnBehavior.WARNING：以日志的形式打印相关警告信息;AutoMappingUnknownColumnBehavior.FAILING：当作映射失败处理，并抛出异常和详细信息
    local-cache-scope: session #Mybatis一级缓存，默认为 SESSION;SESSION session级别缓存，同一个session相同查询语句不会再次查询数据库;STATEMENT 关闭一级缓存;单服务架构中（有且仅有只有一个程序提供相同服务），一级缓存开启不会影响业务，只会提高性能。 微服务架构中需要关闭一级缓存，原因：Service1先查询数据，若之后Service2修改了数据，之后Service1又再次以同样的查询条件查询数据，因走缓存会出现查处的数据不是最新数据
    cache-enabled: true #开启Mybatis二级缓存，默认为 true
    call-setters-on-nulls: false #通俗的讲，即 MyBatis 在使用 resultMap 来映射查询结果中的列，如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段，这就导致在调用到该字段的时候由于没有映射，取不到而报空指针异常
    database-id: 主数据源
    default-executor-type: simple
    default-fetch-size: 1000
    default-result-set-type: default
    default-statement-timeout: 500
    log-prefix: Mybatis日志
    use-column-label: false
  global-config:
    banner: true #是否控制台 print mybatis-plus 的 LOGO
    enableSqlRunner: false #是否初始化 SqlRunner(com.baomidou.mybatisplus.extension.toolkit.SqlRunner)
    super-mapper-class: com.baomidou.mybatisplus.core.mapper.Mapper #通用Mapper父类(影响sqlInjector,只有这个的子类的 mapper 才会注入 sqlInjector 内的 method)
    db-config:
      id-type: assign_id #全局默认主键类型
      schema: #Catalog名.Schema名.表名,此属性主要用于特定的可支持的数据库
      column-format: '%s' #字段 format,例: %s,(对主键无效)
      property-format: '%s' #entity 的字段(property)的 format,只有在 column as property 这种情况下生效例: %s,(对主键无效)
      capital-mode: true #大写命名,对表名和字段名均生效
      #table-underline: true #表名是否使用驼峰转下划线命名,只对表名生效
      table-prefix: #表名前缀
      logic-delete-field: deleted #全局的entity的逻辑删除字段属性名,(逻辑删除下有效)
      logic-delete-value: 1 #逻辑已删除值,(逻辑删除下有效)
      logic-not-delete-value: 0 #逻辑未删除值,(逻辑删除下有效)
      insert-strategy: not_null #字段验证策略之 insert,在 insert 的时候的字段验证策略
      select-strategy: not_null #字段验证策略之 select,在 select 的时候的字段验证策略既 wrapper 根据内部 entity 生成的 where 条件
      update-strategy: not_null #字段验证策略之 update,在 update 的时候的字段验证策略
application:
  secure:
    ignored:
      urls:
        - /login
        - /api/admin-login
